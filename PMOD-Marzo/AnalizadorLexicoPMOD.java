

/* Analizador léxico para práctica de PL*/

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 16/03/06 20:07 from the specification file
 * <tt>C:/Documents and Settings/LuisGP/workspace/PMOD-Marzo/a.flex</tt>
 */
class AnalizadorLexicoPMOD implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int DOCUMENTACION = 1;
  public static final int ERROR = 4;
  public static final int YYINITIAL = 0;
  public static final int OPERACION = 3;
  public static final int NORMAL = 2;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\5\1\0\1\6\1\4\22\0\1\17\3\0\1\10"+
    "\2\0\1\12\1\14\1\16\1\15\1\54\1\56\1\7\1\11\1\0"+
    "\12\1\1\50\1\55\1\52\1\51\1\53\2\0\1\21\5\2\11\3"+
    "\1\22\1\3\1\20\10\3\4\0\1\3\1\0\1\27\1\31\1\36"+
    "\1\35\1\32\1\43\1\26\1\46\1\33\2\3\1\47\1\30\1\34"+
    "\1\25\1\23\1\3\1\24\1\37\1\40\1\42\1\41\1\45\1\3"+
    "\1\44\1\3\1\57\1\0\1\13\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\2\1\3\1\4\2\5\1\6\1\2"+
    "\1\7\1\2\1\10\1\11\1\12\16\4\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\6\1\17"+
    "\5\2\1\0\1\23\2\0\1\24\1\0\2\4\1\25"+
    "\5\4\1\26\6\4\1\27\1\30\1\31\1\32\4\2"+
    "\1\33\1\34\2\0\2\4\1\35\1\36\1\4\1\37"+
    "\1\40\1\41\2\4\1\42\2\4\1\2\1\43\1\44"+
    "\1\45\1\46\1\0\5\4\1\47\2\4\1\50\3\4"+
    "\1\51\1\52\1\4\1\53\2\4\1\54\1\4\1\55"+
    "\3\4\1\56\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[126];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\300\0\360\0\300"+
    "\0\u0120\0\u0150\0\u0180\0\300\0\u01b0\0\u01e0\0\300\0\u0210"+
    "\0\u0240\0\300\0\300\0\u0270\0\u02a0\0\u02d0\0\u0300\0\u0330"+
    "\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420\0\u0450\0\u0480\0\u04b0"+
    "\0\u04e0\0\u0510\0\300\0\u0540\0\u0570\0\u01b0\0\300\0\300"+
    "\0\300\0\300\0\300\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0660"+
    "\0\u0690\0\u06c0\0\u06f0\0\u0210\0\u0720\0\u0750\0\u0780\0\u07b0"+
    "\0\u0150\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0\0\u0150\0\u08d0"+
    "\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0\0\300\0\300\0\300"+
    "\0\300\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\300\0\u0690\0\u0ab0"+
    "\0\u0ae0\0\u0b10\0\u0b40\0\u0150\0\u0150\0\u0b70\0\u0150\0\u0150"+
    "\0\u0150\0\u0ba0\0\u0bd0\0\u0150\0\u0c00\0\u0c30\0\u0c60\0\300"+
    "\0\300\0\300\0\u0ab0\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50"+
    "\0\u0d80\0\u0150\0\u0db0\0\u0de0\0\300\0\u0e10\0\u0e40\0\u0e70"+
    "\0\u0150\0\u0150\0\u0ea0\0\u0150\0\u0ed0\0\u0f00\0\u0150\0\u0f30"+
    "\0\u0150\0\u0f60\0\u0f90\0\u0fc0\0\u0150\0\u0150";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[126];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\60\6\57\0\1\7\1\10\1\11\2\12\1\13\2\14"+
    "\1\15\1\16\1\17\1\20\1\10\1\21\1\22\1\23"+
    "\1\14\3\12\1\24\1\25\1\26\1\12\1\27\1\30"+
    "\1\31\1\32\1\12\1\33\1\34\1\35\1\12\1\36"+
    "\1\37\1\12\1\40\1\12\1\41\2\12\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\2\10\2\12"+
    "\1\13\2\14\1\52\1\10\1\17\2\10\1\21\1\22"+
    "\1\23\1\14\5\12\1\26\1\12\1\27\1\30\3\12"+
    "\1\33\1\34\12\12\1\42\1\43\1\44\1\45\1\53"+
    "\1\47\1\50\1\51\60\0\13\54\1\14\1\54\1\55"+
    "\2\54\1\56\1\57\1\60\35\54\1\0\1\11\7\0"+
    "\1\61\47\0\3\12\14\0\30\12\15\0\1\14\53\0"+
    "\1\11\57\0\2\62\4\0\1\63\11\0\1\62\32\0"+
    "\1\63\3\0\12\64\1\65\45\64\15\0\1\66\43\0"+
    "\3\12\14\0\4\12\1\67\23\12\11\0\3\12\14\0"+
    "\12\12\1\70\15\12\11\0\3\12\14\0\4\12\1\71"+
    "\23\12\11\0\3\12\14\0\14\12\1\72\13\12\11\0"+
    "\3\12\14\0\5\12\1\73\22\12\11\0\3\12\14\0"+
    "\12\12\1\74\15\12\11\0\3\12\14\0\14\12\1\75"+
    "\13\12\11\0\3\12\14\0\5\12\1\76\22\12\11\0"+
    "\3\12\14\0\5\12\1\77\5\12\1\100\14\12\11\0"+
    "\3\12\14\0\5\12\1\101\22\12\11\0\3\12\14\0"+
    "\24\12\1\102\3\12\11\0\3\12\14\0\7\12\1\103"+
    "\20\12\11\0\3\12\14\0\22\12\1\104\5\12\11\0"+
    "\3\12\14\0\26\12\1\105\1\12\61\0\1\106\57\0"+
    "\1\107\1\0\1\110\55\0\1\111\6\0\13\54\1\14"+
    "\57\54\1\14\1\54\1\112\1\54\1\113\53\54\1\14"+
    "\3\54\1\114\53\54\1\14\3\54\1\115\53\54\1\116"+
    "\44\54\1\0\1\117\57\0\2\62\6\0\1\120\7\0"+
    "\1\62\37\0\2\62\16\0\1\62\50\0\1\64\45\0"+
    "\15\66\1\121\42\66\1\0\3\12\14\0\5\12\1\122"+
    "\22\12\11\0\3\12\14\0\16\12\1\123\11\12\11\0"+
    "\3\12\14\0\15\12\1\124\12\12\11\0\3\12\14\0"+
    "\15\12\1\125\12\12\11\0\3\12\14\0\6\12\1\126"+
    "\21\12\11\0\3\12\14\0\15\12\1\127\12\12\11\0"+
    "\3\12\14\0\20\12\1\130\7\12\11\0\3\12\14\0"+
    "\21\12\1\131\6\12\11\0\3\12\14\0\14\12\1\132"+
    "\13\12\11\0\3\12\14\0\3\12\1\133\24\12\11\0"+
    "\3\12\14\0\4\12\1\134\23\12\11\0\3\12\14\0"+
    "\14\12\1\135\13\12\11\0\3\12\14\0\13\12\1\136"+
    "\14\12\10\0\13\54\1\14\3\54\1\137\40\54\13\113"+
    "\1\140\44\113\13\114\1\141\44\114\13\115\1\142\44\115"+
    "\1\0\2\143\16\0\1\143\36\0\15\66\1\144\1\14"+
    "\41\66\1\0\3\12\14\0\6\12\1\145\7\12\1\146"+
    "\11\12\11\0\3\12\14\0\5\12\1\147\22\12\11\0"+
    "\3\12\14\0\13\12\1\150\14\12\11\0\3\12\14\0"+
    "\17\12\1\151\10\12\11\0\3\12\14\0\12\12\1\152"+
    "\15\12\11\0\3\12\14\0\16\12\1\153\11\12\11\0"+
    "\3\12\14\0\27\12\1\154\10\0\13\137\1\155\44\137"+
    "\15\66\1\144\1\0\41\66\1\0\3\12\14\0\4\12"+
    "\1\156\23\12\11\0\3\12\14\0\12\12\1\157\15\12"+
    "\11\0\3\12\14\0\4\12\1\160\23\12\11\0\3\12"+
    "\14\0\14\12\1\161\13\12\11\0\3\12\14\0\20\12"+
    "\1\162\7\12\11\0\3\12\14\0\20\12\1\163\7\12"+
    "\11\0\3\12\14\0\12\12\1\164\15\12\11\0\3\12"+
    "\14\0\7\12\1\165\20\12\11\0\3\12\14\0\15\12"+
    "\1\166\12\12\11\0\3\12\14\0\15\12\1\167\12\12"+
    "\11\0\3\12\14\0\13\12\1\170\14\12\11\0\3\12"+
    "\14\0\10\12\1\171\17\12\11\0\3\12\14\0\22\12"+
    "\1\172\5\12\11\0\3\12\14\0\5\12\1\173\22\12"+
    "\11\0\3\12\14\0\4\12\1\174\23\12\11\0\3\12"+
    "\14\0\14\12\1\175\13\12\11\0\3\12\14\0\12\12"+
    "\1\176\15\12\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4080];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\10\1\11\1\1\1\11\3\1\1\11\2\1"+
    "\1\11\2\1\2\11\17\1\1\11\3\1\5\11\5\1"+
    "\1\0\1\1\2\0\1\1\1\0\17\1\4\11\4\1"+
    "\1\11\1\1\2\0\16\1\3\11\1\1\1\0\10\1"+
    "\1\11\21\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[126];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

StringBuffer string = new StringBuffer();
 
/*private Yytoken symbol(int type) {
    return new Yytoken(type);
}

private Yytoken symbol(int type, Object value) {
    return new Yytoken(type, value);
}*/

    /* To create a new java_cup.runtime.Symbol with information about
       the current token, the token will have no value in this
       case. */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    /* Also creates a new java_cup.runtime.Symbol with information
       about the current token, but this object has a value. */
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


private String checkPlus(String str){
	if(str.charAt(0)=='+')
		return str.substring(1);
	return str;
}

private String delDolar(String str){
	if(str.charAt(1)=='+')
		return str.substring(2);
	return str.substring(1);
}

private Double HexStrToDouble(String str){
		double valor = 0.0;
		int length = str.length();
		boolean signo = false;
		int i = 1;
		
		if(str.charAt(1)=='-'){
			signo = true;
			i = 2;
			}
		else
			if(str.charAt(1)=='+'){
			  i = 2;
			}
	
		for(; str.charAt(i) != '.'; i++){
			valor = valor*16 + Character.digit(str.charAt(i),16);
		}
		
		int j = 1;
		for(i++; i < length; i++){
		  valor = valor + Character.digit(str.charAt(i),16)*Math.pow(0.0625,j);
		  j++;
		}

		if(signo)
			return new Double(-valor);

		return new Double(valor);
}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorLexicoPMOD(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  AnalizadorLexicoPMOD(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 132) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 30: 
          { yybegin(NORMAL); return symbol(sym.MOD);
          }
        case 48: break;
        case 40: 
          { yybegin(NORMAL); return symbol(sym.COM_CORTO, yytext().substring(4,yytext().length()-1));
          }
        case 49: break;
        case 17: 
          { yybegin(NORMAL); return symbol(sym.COMA);
          }
        case 50: break;
        case 7: 
          { yybegin(NORMAL); return symbol(sym.PUNTO);
          }
        case 51: break;
        case 6: 
          { yybegin(NORMAL); return symbol(sym.RESTA);
          }
        case 52: break;
        case 31: 
          { return symbol(sym.END);
          }
        case 53: break;
        case 5: 
          { yybegin(NORMAL);
          }
        case 54: break;
        case 22: 
          { yybegin(NORMAL); return symbol(sym.DO);
          }
        case 55: break;
        case 4: 
          { yybegin(OPERACION); return symbol(sym.ID, yytext());
          }
        case 56: break;
        case 41: 
          { return symbol(sym.BEGIN);
          }
        case 57: break;
        case 3: 
          { yybegin(OPERACION); return symbol(sym.NUM_CONST, Long.valueOf(checkPlus(yytext())));
          }
        case 58: break;
        case 37: 
          { yybegin(NORMAL); return symbol(sym.COM_AUTOR, yytext().substring(3,yytext().length()-1));
          }
        case 59: break;
        case 16: 
          { yybegin(NORMAL); return symbol(sym.PCOMA);
          }
        case 60: break;
        case 10: 
          { yybegin(OPERACION); return symbol(sym.PAR_CER);
          }
        case 61: break;
        case 25: 
          { yybegin(NORMAL); return symbol(sym.DISTINTO);
          }
        case 62: break;
        case 44: 
          { return symbol(sym.RECORD);
          }
        case 63: break;
        case 2: 
          { yybegin(NORMAL); System.err.println("Error lexico en linea = "+(yyline+1)+", columna = "+(yycolumn+1)); return symbol(sym.LEXERROR, yytext().substring(0,yytext().indexOf('\n')));
          }
        case 64: break;
        case 19: 
          { yybegin(OPERACION); return symbol(sym.NUM_CONST, Long.valueOf(delDolar(yytext()), 16));
          }
        case 65: break;
        case 21: 
          { yybegin(NORMAL); return symbol(sym.OR);
          }
        case 66: break;
        case 24: 
          { yybegin(NORMAL); return symbol(sym.MENORIGUAL);
          }
        case 67: break;
        case 14: 
          { yybegin(NORMAL); return symbol(sym.MAYOR);
          }
        case 68: break;
        case 39: 
          { return symbol(sym.TYPE);
          }
        case 69: break;
        case 11: 
          { yybegin(NORMAL); return symbol(sym.DOS_PUNTOS);
          }
        case 70: break;
        case 13: 
          { yybegin(NORMAL); return symbol(sym.MENOR);
          }
        case 71: break;
        case 12: 
          { yybegin(NORMAL); return symbol(sym.IGUAL);
          }
        case 72: break;
        case 28: 
          { yybegin(OPERACION); return symbol(sym.NUM_CONST, Double.valueOf(yytext()));
          }
        case 73: break;
        case 34: 
          { return symbol(sym.VAR);
          }
        case 74: break;
        case 43: 
          { return symbol(sym.WHILE);
          }
        case 75: break;
        case 47: 
          { return symbol(sym.PROCEDURE);
          }
        case 76: break;
        case 23: 
          { yybegin(NORMAL); return symbol(sym.ASIG);
          }
        case 77: break;
        case 27: 
          { yybegin(NORMAL); return symbol(sym.COM_PARAM);
          }
        case 78: break;
        case 15: 
          { yybegin(NORMAL); return symbol(sym.SUMA);
          }
        case 79: break;
        case 35: 
          { yybegin(NORMAL); return symbol(sym.COM_LARGO, yytext().substring(3,yytext().length()-1));
          }
        case 80: break;
        case 20: 
          { return symbol(sym.CTE_LITERAL, (yytext().substring(1,yytext().length()-1)).replaceAll("''","'"));
          }
        case 81: break;
        case 46: 
          { return symbol(sym.FUNCTION);
          }
        case 82: break;
        case 42: 
          { return symbol(sym.CONST);
          }
        case 83: break;
        case 18: 
          { yybegin(DOCUMENTACION); yypushback(1);
          }
        case 84: break;
        case 32: 
          { yybegin(NORMAL); return symbol(sym.NOT);
          }
        case 85: break;
        case 29: 
          { yybegin(NORMAL); return symbol(sym.AND);
          }
        case 86: break;
        case 36: 
          { yybegin(NORMAL); return symbol(sym.COM_RETORNO, yytext().substring(3,yytext().length()-1));
          }
        case 87: break;
        case 8: 
          { yybegin(NORMAL); return symbol(sym.PAR_ABR);
          }
        case 88: break;
        case 26: 
          { yybegin(NORMAL); return symbol(sym.MAYORIGUAL);
          }
        case 89: break;
        case 1: 
          { yybegin(NORMAL); yypushback(1);
          }
        case 90: break;
        case 33: 
          { yybegin(NORMAL); return symbol(sym.DIV);
          }
        case 91: break;
        case 38: 
          { yybegin(OPERACION); return symbol(sym.NUM_CONST, HexStrToDouble(yytext()));
          }
        case 92: break;
        case 9: 
          { yybegin(NORMAL); return symbol(sym.MULT);
          }
        case 93: break;
        case 45: 
          { return symbol(sym.PROGRAM);
          }
        case 94: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
