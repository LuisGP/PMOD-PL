import java_cup.runtime.*;
import tablaSimbolos.*;

/* Codigo de usuario */
parser code {:
	private int line;
	private int column;
	public TablaSimbolos tablaActual = new TablaSimbolos();

	public void syntax_error(Symbol cur_token){
		line = cur_token.left+1;
		column = cur_token.right+1;
		
		System.err.println();
		System.err.print("Error en linea "+(cur_token.left+1)+" columna "+(cur_token.right+1));
		if(cur_token.value != null)
			System.err.print(" en lexema: "+cur_token.value);
		System.err.print(": ");
	}
	
	public void unrecovered_syntax_error(Symbol cur_token) {
		System.err.println("Error de sintaxis en la línea " + line + " columna " + column);
	}
	
	public void syntax_error(String msg){
		System.err.println(msg);
	}
:}

/* Terminales */
terminal PROGRAM;
terminal BEGIN;
terminal END;
terminal CONST;
terminal VAR;
terminal PROCEDURE;
terminal FUNCTION;
terminal TYPE;
terminal RECORD;
terminal PCOMA;
terminal PUNTO;
terminal COMA;
terminal PAR_ABR;
terminal PAR_CER;
terminal DOS_PUNTOS;
terminal ASIG;
terminal SUMA;
terminal RESTA;
terminal Symbol ID;
terminal Symbol NUM_CONST;
terminal MULT;
terminal MENOR;
terminal MENORIGUAL;
terminal DISTINTO;
terminal IGUAL;
terminal MAYOR;
terminal MAYORIGUAL;
terminal NOT;
terminal AND;
terminal OR;
terminal MOD;
terminal DIV;
terminal Symbol COM_CORTO;
terminal Symbol COM_LARGO;
terminal Symbol COM_AUTOR;
terminal Symbol COM_PARAM;
terminal Symbol COM_RETORNO;
terminal Symbol CTE_LITERAL;
terminal DO;
terminal WHILE;
terminal Symbol LEXERROR;

/* No terminales */
non terminal Temporal prg;
non terminal Temporal prg_autor;
non terminal Temporal blq;
non terminal Temporal dcllist;
non terminal Temporal sentlist;
non terminal Temporal comment;
non terminal Temporal dcl;
non terminal Temporal defcte;
non terminal Temporal ctelist;
non terminal Literal simpvalue;
non terminal Temporal commentlist;
non terminal Temporal defvar;
non terminal Temporal defvarlist;
non terminal Temporal varlist;
non terminal Temporal defproc;
non terminal Temporal deffun;
non terminal Temporal formal_paramlist;
non terminal Temporal formal_param;
non terminal Temporal subpcomment;
non terminal Temporal sent;
non terminal Temporal asig;
non terminal Temporal id;
non terminal Temporal exp;
non terminal Temporal superexp;
non terminal Temporal fact;
non terminal Temporal superfact;
non terminal Temporal term;
non terminal Temporal superterm;
non terminal Temporal op_adit;
non terminal Temporal op_comp;
non terminal Temporal op_mult;
non terminal Temporal subpparamlist;
non terminal Temporal explist;
non terminal Temporal proc_call;
non terminal Temporal exeblq;
non terminal Temporal dcllist_blq;
non terminal Temporal dcl_blq;
non terminal Temporal deftype;
non terminal Temporal typelist;
non terminal Temporal udtype;
non terminal Temporal wloop;

/* GRAMATICA */

prg ::= prg_autor comment blq PUNTO 
	| prg_autor blq PUNTO 
	| prg_autor error {:parser.syntax_error("Bloque principal incorrecto (¿Falta \"end\"?)");:} PUNTO
	| error {:parser.syntax_error("En programa debe comenzar por \"program\"");:} ID PCOMA COM_AUTOR comment blq PUNTO
	| PROGRAM error {:parser.syntax_error("Se esperaba un identificador");:} PCOMA COM_AUTOR comment blq PUNTO
	| prg_autor blq error {:parser.syntax_error("Se esperaba \".\"");:}
	| error {:parser.syntax_error("Programa incorrecto");:};
	
prg_autor ::= PROGRAM ID:id PCOMA {: parser.tablaActual.addSymbol(new Variable(id, "Program")); :} COM_AUTOR
	| PROGRAM ID error {:parser.syntax_error("Se esperaba \";\"");:} COM_AUTOR
	| PROGRAM ID PCOMA error {:parser.syntax_error("Falta comentario del autor");:} ;

blq ::= dcllist BEGIN sentlist END 
	| BEGIN sentlist END 
	| BEGIN error {:parser.syntax_error("Bloque no válido, se esperaba una sentencia");:} END 
	| error {:parser.syntax_error("Se esperaba \"begin\"");:} sentlist END;


dcllist ::= dcllist PCOMA dcl 
	| PCOMA dcl;


sentlist ::= sent 
	| sentlist PCOMA sent
	| sentlist error {:parser.syntax_error("Se esperaba \";\"");:} sent
	| sentlist PCOMA error {:parser.syntax_error("Sentencia inválida");:}
	| error {:parser.syntax_error("Sentencia inválida");:} PCOMA sent;

comment ::= COM_CORTO 
	| COM_CORTO COM_LARGO;

dcl ::= defcte 
	| defvar 
	| defproc 
	| deffun 
	| deftype
	| error {:parser.syntax_error("Se esperaba \"var\", \"type\", \"function\" o \"procedure\"");:};

defcte ::= commentlist CONST ctelist 
	| CONST ctelist
	| error {:parser.syntax_error("Se esperaba un comentario corto");:} CONST ctelist
	| commentlist error {:parser.syntax_error("Se esperaba \"const\"");:} ctelist 
	| commentlist CONST error {:parser.syntax_error("Declaración de constantes incorrecta");:}
	| CONST error {:parser.syntax_error("Declaración de constantes incorrecta");:};

ctelist ::= ID IGUAL simpvalue PCOMA 
	| ctelist ID IGUAL simpvalue PCOMA
	| error {:parser.syntax_error("Identificador no válido");:} IGUAL simpvalue PCOMA
	| ID error {:parser.syntax_error("Se esperaba \"=\"");:} simpvalue PCOMA
	| ID IGUAL error {:parser.syntax_error("Constante no válida");:} PCOMA
	| ID IGUAL simpvalue error {:parser.syntax_error("Se esperaba \";\"");:}
	| ctelist error {:parser.syntax_error("Identificador no válido");:} IGUAL simpvalue PCOMA
	| ctelist ID error {:parser.syntax_error("Se esperaba \"=\"");:} simpvalue PCOMA
	| ctelist ID IGUAL error {:parser.syntax_error("Constante no válida");:} PCOMA
	| error {:parser.syntax_error("Se esperaba \"=\"");:} ID IGUAL simpvalue PCOMA
	| ctelist ID IGUAL simpvalue error {:parser.syntax_error("Se esperaba \";\"");:};

simpvalue ::= NUM_CONST 
	| CTE_LITERAL;

commentlist ::=  commentlist comment 
	| comment;

defvar ::= VAR defvarlist
	| VAR error {:parser.syntax_error("Error en la declaracion de variable");:};

defvarlist ::= commentlist varlist DOS_PUNTOS ID PCOMA 
	| commentlist varlist DOS_PUNTOS ID PCOMA defvarlist 
	| varlist DOS_PUNTOS ID PCOMA 
	| varlist DOS_PUNTOS ID PCOMA defvarlist
	| commentlist error {:parser.syntax_error("Error en la declaracion de variable");:} DOS_PUNTOS ID PCOMA
	| commentlist varlist error {:parser.syntax_error("Se esperaba \":\"");:} ID PCOMA
	| commentlist varlist DOS_PUNTOS error {:parser.syntax_error("Identificador no válido");:} PCOMA
	| commentlist varlist DOS_PUNTOS ID error {:parser.syntax_error("Se esperaba \";\"");:}
	| varlist error {:parser.syntax_error("Se esperaba \":\"");:} ID PCOMA
	| varlist DOS_PUNTOS error {:parser.syntax_error("Identificador no válido");:} PCOMA
	| varlist DOS_PUNTOS ID error {:parser.syntax_error("Se esperaba \";\"");:};

varlist ::= ID 
	| ID COMA varlist
	| ID COMA error {:parser.syntax_error("Variable inválida");:};
	
defproc ::=  subpcomment PROCEDURE ID formal_paramlist PCOMA blq PCOMA 
	| subpcomment PROCEDURE ID PCOMA blq PCOMA 
	| PROCEDURE ID formal_paramlist PCOMA blq PCOMA 
	| PROCEDURE ID PCOMA blq PCOMA
	| error {:parser.syntax_error("Error en la estructura de comentarios");:} PROCEDURE ID formal_paramlist PCOMA blq PCOMA
	| subpcomment error {:parser.syntax_error("Se esperaba \"procedure o function\"");:} ID formal_paramlist PCOMA blq PCOMA
	| subpcomment PROCEDURE error {:parser.syntax_error("Identificador no válido");:} formal_paramlist PCOMA blq PCOMA
	| subpcomment PROCEDURE ID formal_paramlist error {:parser.syntax_error("Se esperaba \";\"");:} blq PCOMA
	| subpcomment PROCEDURE ID formal_paramlist PCOMA blq error {:parser.syntax_error("Se esperaba \";\"");:}
	| subpcomment PROCEDURE error {:parser.syntax_error("Identificador no válido");:} PCOMA blq PCOMA
	| subpcomment PROCEDURE ID error {:parser.syntax_error("Se esperaba \";\"");:} blq PCOMA
	| subpcomment PROCEDURE ID PCOMA blq error {:parser.syntax_error("Se esperaba \";\"");:}
	| PROCEDURE error {:parser.syntax_error("Identificador no válido");:} formal_paramlist PCOMA blq PCOMA
	| PROCEDURE ID formal_paramlist error {:parser.syntax_error("Se esperaba \";\"");:} blq PCOMA 
	| PROCEDURE ID formal_paramlist PCOMA blq error {:parser.syntax_error("Se esperaba \";\"");:}
	| PROCEDURE error {:parser.syntax_error("Identificador no válido");:} PCOMA blq PCOMA
	| PROCEDURE ID error {:parser.syntax_error("Se esperaba \";\"");:} blq PCOMA
	| PROCEDURE ID PCOMA blq error {:parser.syntax_error("Se esperaba \";\"");:};

deffun ::=  subpcomment FUNCTION ID formal_paramlist DOS_PUNTOS ID PCOMA blq PCOMA 
	| subpcomment FUNCTION ID DOS_PUNTOS ID PCOMA blq PCOMA 
	| FUNCTION ID formal_paramlist DOS_PUNTOS ID PCOMA blq PCOMA 
	| FUNCTION ID DOS_PUNTOS ID PCOMA blq PCOMA	
	| error {:parser.syntax_error("Error en la estructura de comentarios");:} FUNCTION ID formal_paramlist DOS_PUNTOS ID PCOMA blq PCOMA
	| subpcomment FUNCTION error {:parser.syntax_error("Identificador no válido");:} formal_paramlist DOS_PUNTOS ID PCOMA blq PCOMA
	| subpcomment FUNCTION ID formal_paramlist DOS_PUNTOS ID error {:parser.syntax_error("Se esperaba \";\"");:} blq PCOMA
	| subpcomment FUNCTION ID formal_paramlist DOS_PUNTOS ID PCOMA blq error {:parser.syntax_error("Se esperaba \";\"");:}
	| subpcomment FUNCTION error {:parser.syntax_error("Identificador no válido");:} DOS_PUNTOS ID PCOMA blq PCOMA
	| subpcomment FUNCTION ID DOS_PUNTOS ID error {:parser.syntax_error("Se esperaba \";\"");:} blq PCOMA
	| subpcomment FUNCTION ID DOS_PUNTOS ID PCOMA blq error {:parser.syntax_error("Se esperaba \";\"");:}
	| FUNCTION error {:parser.syntax_error("Identificador no válido");:} formal_paramlist DOS_PUNTOS ID PCOMA blq PCOMA
	| FUNCTION ID formal_paramlist DOS_PUNTOS ID error {:parser.syntax_error("Se esperaba \";\"");:} blq PCOMA 
	| FUNCTION ID formal_paramlist DOS_PUNTOS ID PCOMA blq error {:parser.syntax_error("Se esperaba \";\"");:}
	| FUNCTION error {:parser.syntax_error("Identificador no válido");:} DOS_PUNTOS ID PCOMA blq PCOMA
	| FUNCTION ID DOS_PUNTOS ID error {:parser.syntax_error("Se esperaba \";\"");:} blq PCOMA
	| FUNCTION ID DOS_PUNTOS ID PCOMA blq error {:parser.syntax_error("Se esperaba \";\"");:}
	
	| subpcomment FUNCTION ID formal_paramlist error {:parser.syntax_error("Se esperaba \":\"");:} ID PCOMA blq PCOMA 
	| subpcomment FUNCTION ID error {:parser.syntax_error("Se esperaba \":\"");:} ID PCOMA blq PCOMA 
	| FUNCTION ID formal_paramlist error {:parser.syntax_error("Se esperaba \":\"");:} ID PCOMA blq PCOMA 
	| FUNCTION ID error {:parser.syntax_error("Se esperaba \":\"");:} ID PCOMA blq PCOMA
	
	| subpcomment FUNCTION ID formal_paramlist DOS_PUNTOS error {:parser.syntax_error("Identificador no válido");:} PCOMA blq PCOMA 
	| subpcomment FUNCTION ID DOS_PUNTOS error {:parser.syntax_error("Identificador no válido");:} PCOMA blq PCOMA 
	| FUNCTION ID formal_paramlist DOS_PUNTOS error {:parser.syntax_error("Identificador no válido");:} PCOMA blq PCOMA 
	| FUNCTION ID DOS_PUNTOS error {:parser.syntax_error("Identificador no válido");:} PCOMA blq PCOMA;

formal_paramlist ::= PAR_ABR formal_param PAR_CER;

formal_param ::= varlist DOS_PUNTOS ID 
	| varlist DOS_PUNTOS ID PCOMA formal_param;
	
subpcomment ::= comment COM_PARAM commentlist COM_RETORNO 
	| comment COM_PARAM COM_RETORNO
	| comment COM_PARAM error {:parser.syntax_error("Se esperaba una lista de comentarios");:} COM_RETORNO
	| comment COM_PARAM commentlist error {:parser.syntax_error("Se esperaba un comentario de retorno");:}
	| comment COM_PARAM error{:parser.syntax_error("Se esperaba comentario de retorno");:};

sent ::= asig 
	| proc_call 
	| exeblq 
	| wloop;

asig ::= id ASIG exp
	| id ASIG error {:parser.syntax_error("Expresión incorrecta");:};

id ::= ID 
	| ID PUNTO ID	
	| error {:parser.syntax_error("Se esperaba identificador");:}PUNTO ID
	| ID PUNTO error{:parser.syntax_error("Se esperaba identificador");:};

/******************************************************/

exp ::= exp OR superexp
	| superexp;
	
superexp ::= superexp AND term
	| term;
	
term ::= term op_comp superterm
	| superterm;
	
superterm ::= superterm op_adit fact
	| fact;
	
fact ::= fact op_mult superfact
	| superfact;

// MIRAR	
superfact ::= simpvalue
	| PAR_ABR exp PAR_CER
	| NOT superfact
	| ID subpparamlist
	| ID PUNTO ID
	| ID
	| PAR_ABR error {: parser.syntax_error("Expresión entre paréntesis inválida"); :} PAR_CER
	| NOT error {: parser.syntax_error("Expresión inválida"); :};
	
op_adit ::= SUMA | RESTA;

op_mult ::= MULT | DIV | MOD;

op_comp ::= MENOR | MAYOR | MENORIGUAL | MAYORIGUAL | IGUAL | DISTINTO;

subpparamlist ::= PAR_ABR explist PAR_CER;
	
explist ::= exp
	| exp COMA explist;
	
proc_call ::= ID subpparamlist
	| ID;
	
exeblq ::= dcllist_blq BEGIN sentlist END
	| BEGIN sentlist END
	| BEGIN {: parser.syntax_error("Lista de sentencias vacía"); :} END
	| BEGIN error {: parser.syntax_error("Lista de sentencias inválida"); :} END;
	
/*******************************************************/

dcllist_blq ::= dcllist_blq PCOMA dcl_blq 
	| PCOMA dcl_blq;

dcl_blq ::= defcte 
	| deftype 
	| defvar
	| error {:parser.syntax_error("Se esperaba \"var\" o \"type\"");:};

deftype ::= TYPE typelist
	| TYPE error {:parser.syntax_error("Se esperaba una lista de tipos");:};

typelist ::= ID IGUAL udtype PCOMA 
	| ID IGUAL udtype PCOMA typelist
	| error {:parser.syntax_error("Se esperaba \"id\"");:} IGUAL udtype PCOMA
	| ID error {:parser.syntax_error("Se esperaba \"=\"");:} udtype PCOMA
	| ID IGUAL error {:parser.syntax_error("Declaración de registro no válido");:} PCOMA
	| ID IGUAL udtype error {:parser.syntax_error("Se esperaba \";\"");:};

udtype ::= RECORD defvarlist END
	| error {:parser.syntax_error("Se esperaba \"record\"");:} defvarlist END
	| RECORD error {:parser.syntax_error("Declaración de variables incorrecta");:} END
	| RECORD defvarlist error {:parser.syntax_error("Se esperaba \"end\"");:};

wloop ::= WHILE exp DO sent
//	| error {:parser.syntax_error("Falta palabra reservada \"while\"");:} exp DO sent
	| WHILE error {:parser.syntax_error("Condición no válida");:} DO sent
	| WHILE exp error {:parser.syntax_error("Se esperaba \"do\"");:} sent
	| WHILE exp DO error {:parser.syntax_error("Se esperaba una sentencia, o sentencia incorrecta");:};
